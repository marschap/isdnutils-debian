head	1.6;
access;
symbols;
locks
	fritz:1.6; strict;
comment	@ * @;


1.6
date	95.12.18.18.25.24;	author fritz;	state Exp;
branches;
next	1.5;

1.5
date	95.10.29.21.44.02;	author fritz;	state Exp;
branches;
next	1.4;

1.4
date	95.04.23.13.43.02;	author fritz;	state Exp;
branches;
next	1.3;

1.3
date	95.02.01.11.03.26;	author fritz;	state Exp;
branches;
next	1.2;

1.2
date	95.01.09.07.41.59;	author fritz;	state Exp;
branches;
next	1.1;

1.1
date	95.01.02.02.16.36;	author fritz;	state Exp;
branches;
next	;


desc
@Control-Program for setting icn-device parameters
@


1.6
log
@Support for ICN-2B Cards.
@
text
@/* $Id: icnctrl.c,v 1.5 1995/10/29 21:44:02 fritz Exp fritz $
 *
 * ICN-ISDN driver for Linux. (Control-Utility)
 *
 * Copyright 1994,95 by Fritz Elfert (fritz@@wuemaus.franken.de)
 * Copyright 1995 Thinking Objects Software GmbH Wuerzburg
 *
 * This file is part of Isdn4Linux.
 * 
 * Isdn4Linux is distributed with NO WARRANTY OF ANY KIND.  No author
 * or distributor accepts any responsibility for the consequences of using it,
 * or for whether it serves any particular purpose or works at all, unless he
 * or she says so in writing.  Refer to the Isdn4Linux Free Public
 * License (the "License") for full details.
 * 
 * Every copy of Isdn4Linux must include a copy of the License,
 * normally in a plain ASCII text file named LICENSE.  The License grants you
 * the right to copy, modify and redistribute Isdn4Linux, but only
 * under certain conditions described in the License.  Among other things, the
 * License requires that the copyright notice and this notice be preserved on
 * all copies.
 *
 * $Log: icnctrl.c,v $
 * Revision 1.5  1995/10/29  21:44:02  fritz
 * Changed to support DriverId's.
 * Added support for leased lines.
 *
 * Revision 1.4  1995/04/23  13:43:02  fritz
 * Changed Copyright.
 *
 * Revision 1.3  1995/02/01  11:03:26  fritz
 * Added Messages, when loading bootcode and protocol.
 *
 * Revision 1.2  1995/01/09  07:41:59  fritz
 * Added GPL-Notice
 *
 *
 */

#include <stdio.h>
#include <sys/ioctl.h>
#include <sys/types.h>
#include <fcntl.h>
#include <string.h>
#include <unistd.h>

#include <isdn.h>
#include "icn.h"

char *cmd;
char *ctrldev;
int  arg_ofs;

void usage() {
  fprintf(stderr,"usage: %s [-d driverId] io [mmio port]             (get/set hw-io)\n",cmd);
  fprintf(stderr,"   or: %s [-d driverId] load <bootcode> <protocol> (load firmware)\n",cmd);
  fprintf(stderr,"   or: %s [-d driverId] leased <on|off>            (Switch interface\n",cmd);
  fprintf(stderr,"                                                       into Leased-Line-Mode)\n");
  exit(-1);
}

int main(int argc, char **argv) {
  int fd;
  FILE *code;
  int mmio,port;
  int ac;
  u_char buf[0x20000];
  isdn_ioctl_struct ioctl_s;

  cmd = strrchr(argv[0],'/');
  cmd = (cmd == NULL)?argv[0]:++cmd;
  if (argc>1) {
    if (!strcmp(argv[1],"-d")) {
      strcpy(ioctl_s.drvid,argv[2]);
      arg_ofs = 3;
    } else {
      ioctl_s.drvid[0] = '\0';
      arg_ofs = 1;
    }
  } else
    usage();
  ac = argc - (arg_ofs-1);
  fd = open("/dev/isdnctrl",O_RDWR);
  if (fd < 0) {
    perror(ctrldev);
    exit(-1);
  }
  if (!strcmp(argv[arg_ofs],"leased")) {
    if (ac == 3) {
      ioctl_s.arg = 0;
      if ((!strcmp(argv[arg_ofs+1],"on")) ||
          (!strcmp(argv[arg_ofs+1],"yes"))  )
	ioctl_s.arg = 1;
      if ((ioctl(fd,ICN_IOCTL_LEASEDCFG+ISDN_IOCTL_DRVIOCTL,&ioctl_s))<0) {
	perror("ioctl LEASEDCFG");
	exit(-1);
      }
      close(fd);
      return 0;
    }
  }
  if (!strcmp(argv[arg_ofs],"io")) {
    if (ac == 4) {
      if (sscanf(argv[arg_ofs+1],"%i",&mmio)!=1)
	usage();
      if (sscanf(argv[arg_ofs+2],"%i",&port)!=1)
	usage();
      ioctl_s.arg = mmio;
      if ((mmio = ioctl(fd,ICN_IOCTL_SETMMIO+ISDN_IOCTL_DRVIOCTL,&ioctl_s))<0) {
	perror("ioctl SETMMIO");
	exit(-1);
      }
      ioctl_s.arg = port;
      if ((port = ioctl(fd,ICN_IOCTL_SETPORT+ISDN_IOCTL_DRVIOCTL,&ioctl_s))<0) {
	perror("ioctl SETPORT");
	exit(-1);
      }
    }
    if ((mmio = ioctl(fd,ICN_IOCTL_GETMMIO+ISDN_IOCTL_DRVIOCTL,&ioctl_s))<0) {
      perror("ioctl GETMMIO");
      exit(-1);
    }
    if ((port = ioctl(fd,ICN_IOCTL_GETPORT+ISDN_IOCTL_DRVIOCTL,&ioctl_s))<0) {
      perror("ioctl GETPORT");
      exit(-1);
    }
    printf("Memory-mapped io at 0x%08lx, port 0x%03x\n",
	   (unsigned long)mmio,(unsigned short)port);
    close(fd);
    return 0;
  }
  if (!strcmp(argv[arg_ofs],"load")) {
    int needed;
    switch (ioctl(fd,ICN_IOCTL_GETDOUBLE+ISDN_IOCTL_DRVIOCTL,&ioctl_s)) {
      case 0:
	needed = 4;
	break;
      case 1:
	needed = 5;
	break;
      default:
	perror("ioctl GETDOUBLE");
	exit(-1);
    }
    if (ac == needed) {
      if (!(code=fopen(argv[arg_ofs+1],"r"))) {
	perror(argv[arg_ofs+1]);
	exit(-1);
      }
      if (fread(buf,4096,1,code)<1) {
	fprintf(stderr,"Read error on %s\n",argv[arg_ofs+1]);
	exit(-1);
      }
      printf("Loading Bootcode %s ... ",argv[arg_ofs+1]);
      fflush(stdout);
      ioctl_s.arg = (ulong)buf;
      if (ioctl(fd,ICN_IOCTL_LOADBOOT+ISDN_IOCTL_DRVIOCTL,&ioctl_s)<0) {
	perror("\nioctl LOADBOOT");
	exit(-1);
      }
      fclose(code);
      printf("done\n");
      if (!(code=fopen(argv[arg_ofs+2],"r"))) {
	perror(argv[arg_ofs+2]);
	exit(-1);
      }
      if (fread(buf,65536,1,code)<1) {
	fprintf(stderr,"Read error on %s\n",argv[arg_ofs+2]);
	exit(-1);
      }
      fclose(code);
      if (needed == 5) {
	if (!(code=fopen(argv[arg_ofs+3],"r"))) {
	  perror(argv[arg_ofs+3]);
	  exit(-1);
	}
	if (fread(buf+65536,65536,1,code)<1) {
	  fprintf(stderr,"Read error on %s\n",argv[arg_ofs+3]);
	  exit(-1);
	}
	fclose(code);
	printf("Loading Protocols %s\n",argv[arg_ofs+2]);
	printf("              and %s ... ",argv[arg_ofs+3]);
      } else
	printf("Loading Protocol %s ... ",argv[arg_ofs+2]);
      fflush(stdout);
      ioctl_s.arg = (ulong)buf;
      if (ioctl(fd,ICN_IOCTL_LOADPROTO+ISDN_IOCTL_DRVIOCTL,&ioctl_s)<0) {
	perror("\nioctl LOADPROTO");
	exit(-1);
      }
      printf("done\n");
      close(fd);
      return 0;
    }
    usage();
  }
  usage();
  return 0;
}



@


1.5
log
@Changed to support DriverId's.
Added support for leased lines.
@
text
@d1 1
a1 1
/* $Id: icnctrl.c,v 1.4 1995/04/23 13:43:02 fritz Exp fritz $
d8 14
a21 13
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. 
d24 4
d67 1
a67 1
  u_char buf[0x10000];
d133 13
a145 1
    if (ac == 4) {
d154 2
a155 1
      printf("Loading Bootcode %s ...\n",argv[arg_ofs+1]);
d158 1
a158 1
	perror("ioctl LOADBOOT");
d162 1
d171 16
a186 1
      printf("Loading Protocol %s ...\n",argv[arg_ofs+2]);
d189 1
a189 1
	perror("ioctl SETPORT");
d192 1
a192 1
      fclose(code);
@


1.4
log
@Changed Copyright.
@
text
@d1 1
a1 1
/* $Id: icnctrl.c,v 1.3 1995/02/01 11:03:26 fritz Exp fritz $
d23 3
d39 1
d46 2
d50 4
a53 2
  fprintf(stderr,"usage: %s io [mmio port]             (get/set hw-io)\n",cmd);
  fprintf(stderr,"   or: %s load <bootcode> <protocol> (load firmware)\n",cmd);
d61 1
d63 1
d65 55
a119 5
  cmd = argv[0];
  if (argc==2 || argc==4) {
    fd = open("/dev/isdnctrl",O_RDWR);
    if (fd < 0) {
      perror("/dev/isdnctrl");
d122 24
a145 17
    if (!strcmp(argv[1],"io")) {
      if (argc == 4) {
	if (sscanf(argv[2],"%i",&mmio)!=1)
	  usage();
	if (sscanf(argv[3],"%i",&port)!=1)
	  usage();
	if ((mmio = ioctl(fd,ICN_IOCTL_SETMMIO+ISDN_IOCTL_DRVIOCTL,mmio))<0) {
	  perror("ioctl SETMMIO");
	  exit(-1);
	}
	if ((port = ioctl(fd,ICN_IOCTL_SETPORT+ISDN_IOCTL_DRVIOCTL,port))<0) {
	  perror("ioctl SETPORT");
	  exit(-1);
	}
      }
      if ((mmio = ioctl(fd,ICN_IOCTL_GETMMIO+ISDN_IOCTL_DRVIOCTL,0))<0) {
	perror("ioctl GETMMIO");
d148 2
a149 2
      if ((port = ioctl(fd,ICN_IOCTL_GETPORT+ISDN_IOCTL_DRVIOCTL,0))<0) {
	perror("ioctl GETPORT");
d152 7
a158 2
      printf("Memory-mapped io at 0x%08lx, port 0x%03x\n",
	     (unsigned long)mmio,(unsigned short)port);
d162 1
a162 35
    if (!strcmp(argv[1],"load")) {
      if (argc == 4) {
	if (!(code=fopen(argv[2],"r"))) {
	  perror(argv[2]);
	  exit(-1);
	}
	if (fread(buf,4096,1,code)<1) {
	  fprintf(stderr,"Read error on %s\n",argv[2]);
	  exit(-1);
	}
	printf("Loading Bootcode %s ...\n",argv[2]);
	if (ioctl(fd,ICN_IOCTL_LOADBOOT+ISDN_IOCTL_DRVIOCTL,buf)<0) {
	  perror("ioctl LOADBOOT");
	  exit(-1);
	}
	fclose(code);
	if (!(code=fopen(argv[3],"r"))) {
	  perror(argv[3]);
	  exit(-1);
	}
	if (fread(buf,65536,1,code)<1) {
	  fprintf(stderr,"Read error on %s\n",argv[3]);
	  exit(-1);
	}
	printf("Loading Protocol %s ...\n",argv[3]);
	if (ioctl(fd,ICN_IOCTL_LOADPROTO+ISDN_IOCTL_DRVIOCTL,buf)<0) {
	  perror("ioctl SETPORT");
	  exit(-1);
	}
	fclose(code);
	close(fd);
	return 0;
      }
      usage();
    }
d167 3
@


1.3
log
@Added Messages, when loading bootcode and protocol.
@
text
@d1 1
a1 1
/* $Id: icnctrl.c,v 1.2 1995/01/09 07:41:59 fritz Exp fritz $
d6 1
d23 3
@


1.2
log
@Added GPL-Notice
@
text
@d1 1
a1 1
/* $Id$
d21 3
a23 1
 * $Log$
d25 1
d96 1
d110 1
@


1.1
log
@Initial revision
@
text
@d1 24
d37 2
a38 1
  fprintf(stderr,"usage: %s [mmio port] (set hw-io)\n",cmd);
d44 1
d46 1
d49 1
a49 1
  if (argc==1 || argc==3) {
d55 18
a72 8
    if (argc == 3) {
      if (sscanf(argv[1],"%x",&mmio)!=1)
	usage();
      if (sscanf(argv[2],"%x",&port)!=1)
	usage();
      if ((mmio = ioctl(fd,ICN_IOCTL_SETMMIO+ISDN_IOCTL_DRVIOCTL,mmio))<0) {
        perror("ioctl SETMMIO");
        exit(-1);
d74 3
a76 3
      if ((port = ioctl(fd,ICN_IOCTL_SETPORT+ISDN_IOCTL_DRVIOCTL,port))<0) {
        perror("ioctl SETPORT");
        exit(-1);
d78 4
d83 32
a114 7
    if ((mmio = ioctl(fd,ICN_IOCTL_GETMMIO+ISDN_IOCTL_DRVIOCTL,0))<0) {
      perror("ioctl GETMMIO");
      exit(-1);
    }
    if ((port = ioctl(fd,ICN_IOCTL_GETPORT+ISDN_IOCTL_DRVIOCTL,0))<0) {
      perror("ioctl GETPORT");
      exit(-1);
a115 4
    close(fd);
    printf("Memory-mapped io at 0x%08lx, port 0x%03x\n",
           (unsigned long)mmio,(unsigned short)port);
    return 0;
@
