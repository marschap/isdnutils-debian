#! /bin/sh -e

# DP: eurofile: add manpages for eftp and eftd.

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "usage: `basename $0`: -patch|-unpatch [-d <srcdir>]"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p1 < $0
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p1 < $0
        ;;
    *)
	echo >&2 "usage: `basename $0`: -patch|-unpatch [-d <srcdir>]"
        exit 1
esac
exit 0

--- isdnutils-3.3.orig/eurofile/doc/eftp.1
+++ isdnutils-3.3/eurofile/doc/eftp.1
@@ -0,0 +1,304 @@
+.\" $Id: $
+.\"
+.\" CHECKIN $Date: $
+.\"
+.TH eftp 1
+.SH NAME
+eftp \- ISDN EUROFILE file transfer client
+.SH SYNOPSIS
+eftp [ -i ISDN_NO ] [ -x X25_ADDRESS ] [ -u USER[/PASSWORD] ] [-p] [-h]
+.SH DESCRIPTION
+.B eftp
+is a simple EUROFILE transfer client with a command line user
+interface roughly resembling the ftp client.
+
+Novice users are initially recommended to invoke eftp as
+
+	eftp -i ISDN_NO -u USER
+
+.SH OPTIONS
+.TP
+.BI "-i" " ISDN_NO"
+ISDN number of the remote EUROFILE server to connect to.
+The client will try to set up an isdn connection to this number and
+an X.25 DTE-DTE connection on top of this.
+
+.TP
+.BI "-x" " X25_ADDRESS"
+directly specify the X.25 address used for setting up the X.25
+connection. For eftp to work, an X.25 route for that address must
+already be present. The X.25 route must point to an isdn4linux
+network interface that is configured for outgoing connections to a
+destination EUROFILE server. The encapsulation of the interface
+must be "x25iface", l2_prot must be x75i.
+
+If neither -i nor -x option is specified, the behavior is like
+an empty string -x option ( as if called like  "eftp -x ''" )
+
+.TP
+.BI "-u" " USER[/PASSWORD]"
+The user identity used to login to the remote EUROFILE server. The
+password can be appended to the user id seperated by a '/'
+character. If no '/' is present in the parameter of the -u option,
+eftp will prompt for a password.
+
+.LP
+.RS
+.B CAUTION:
+.br
+Entering the password on the command line allows other users
+to spoof the password, e.g. by means of the ps command. The
+password might also leave other traces, e.g. in your shell's
+history file. Thus, DON'T include the passwd in the -u argument
+on machines where this is a concern (e.g. when untrusted users
+have shell accounts on the machine).
+
+If the -u option is missing, the client will try to login without
+a user id (some servers will treat this as anonymous access).
+.RE
+
+.TP
+.BI -p
+suppress prompting for a password even if the argument to the -u
+option does not contain a password. This is useful for accounts on
+EUROFILE servers without password protection.
+
+.TP
+.BI -h
+print a help message to stdout.
+
+.SH ISDN CONNECTIONS
+
+If invoked with the -i option, eftp will try its best to create and
+set up all related isdn interfaces automatically and to remove them
+after the end of the session. In order to undo the setup after the
+end of the session reliably (i.e. even when the eftp process crashes),
+eftp forks a child process which is in charge of processing the
+eurofile session while taking care itself only for supervising the
+isdn connection setup and undoing all temporary isdn configurations
+after the child exits.
+
+However, the control and configuration of isdn connections requires
+certain privileges (netadmin capability, write access to
+/dev/isdnctrl; debian users need to be in the "dialout" group).
+
+To overcome this problem, eftp now has special support to execute suid
+root. To take advantage of this, make root the owner of the eftp
+binary and set the suid bit.
+This is not done as standard in the debian package because it is
+better to put authorized users in the dialout group.
+
+.B WARNING/DISCLAIMER:
+suid programs are inherently dangerous because
+potential bugs in the programme, the kernel or standard libraries
+might be exploitable to gain root priviliges. If this is a concern,
+don't install eftp suid root. If installed suid root, also consider
+to clear the world executable bit of the eftp binary and to change
+its group to a group of trusted users who are allowed to execute
+the setuid eftp programme.
+
+eftp will change the uid of the forked child process (which is in
+charge of the protocol procession) to the (less priviliged) real
+user id of the caller as soon as possible. Only the parent process,
+which does not interact with the user directly and needs more
+priviliges in order to clean up the isdn setup,
+continues to run suid root. The real userid of the parent
+will be switched to the effective userid (root).
+
+A suid root eftp will not allow all users to set up eurofile isdn
+connections. eftp checks whether the user has write permissions for the
+/dev/ttyI0 special file. Only if this check is passed, the isdn
+connection will be set up. This algorithm ensures that only users, who
+are already permitted to set up isdn connections by other means
+(by writing AT commands to /dev/ttyI0), can set up isdn connections for
+eurofile.
+
+.SH COMMAND INPUT
+
+When eftp has established the connection, it issues the "eftp>" prompt
+and waits for commands that will be read from standard input.
+If configured before compilation, interactive input can be edited by
+means of the GNU readline library.
+
+The following commands are recognised:
+
+.ul
+Commands for Listing and Transferring Files
+
+.PP
+.TP
+.B dir [PATTERN]
+
+This corresponds to ETS 300-075 and ETS 300-383 T-DIRECTORY
+primitive. It prints a list of files contained in the current
+working directory (ETSI calls it the "current filestore").
+PATTERN is a pattern as defined in ETS 300-075 and selects a
+subset of those files to be displayed. ETS 300-075 pattern are
+different from shell wildcard or regular expressions, but the
+pattern "*" matches all filenames as you'd expect. I won't
+explain further pattern rules here because most servers don't
+recognise any patterns different from "*" anyway.
+
+If pattern is omitted, the * pattern is assumed.
+
+Pattern applies to the EUROFILE transfer name of the files,
+which is not necessarily identical to the filename itself.
+
+Likewise, the output of the  command does not list the
+filenames, but the transfer names of the files and the file
+length. Note that only regular files are listed. For listing
+subdirectories, there are the list and slist commands.
+
+.TP
+.B xdir [PATTERN]
+
+This is similar to the dir command but requests the directory
+contents in extended format. In addition to the transfer name,
+this will also contain the real name of the file and the time
+stamp of the last write access.
+
+Note that not all servers support directory requests with
+extended format. Some of those servers will respond with
+a normal directory contents file, others will reject the
+request. In the former case, eftp will issue a warning message
+and use the transfer name for the file name and use 1970-01-01
+as the last access date. (The eftp4linux server supports
+extended directory formats).
+
+.TP
+.B get TRANSFER_NAME [PATH_NAME]
+
+This corresponds to the  300-075 T-LOAD primitive and
+tries to load the file identified by TRANSFER_NAME
+from the remote server and stores it locally using PATH_NAME
+as the destination. If PATH_NAME is omitted, TRANSFER_NAME is
+also used as the destination name.
+
+.TP
+.B put [PATH_NAME] TRANSFER_NAME
+
+This corresponds to the ETS 300-075 T-SAVE primitive and
+tries to upload the local file identified by PATH_NAME
+to the remote server, using TRANSFER_NAME as the destination.
+If PATH_NAME is omitted, TRANSFER_NAME is also used as to
+identify the local file.
+
+.TP
+.B mget PATTERN
+
+get multiple files whose transfer names match PATTERN. PATTERN
+is (currently) interpreted a shell glob pattern, not an
+ETS 300 075 pattern.
+
+.TP
+.B mput PATTERN
+
+put multiple files whose names match PATTERN. PATTERN is
+interpreted a shell glob pattern, not an ETS 300 075 pattern.
+
+NOTE: The matched name is also used as the transfer name.
+If pattern matched local files whose file name do not form
+a valid ETS 300-383 transfer name, the transfer of those
+files might fail.
+
+.TP
+.B prompt [on|off]
+
+If "on", prior to each file transferred by mput or mget, the
+user is prompted for confirmation. If no parameter is given
+the on/off value is toggled.
+
+Possible user responses to the prompt:
+
+y	transfer the file
+.br
+n	don't transfer the file and prompt for the next one
+
+.TP
+.B case [on|off]
+
+If "off", cases are ignored when matching PATTERN in mget and mput.
+If parameter is missing, toggle current parameter value.
+
+This currently does nor work with all versions of libc.
+
+.PP
+
+.ul
+Navigation Commands (related to directories)
+
+These commands are likely to fail because many servers don't
+support the navigation facility. (The eftp4linux server,
+however, supports this :-)
+
+.TP
+.B cd [DIRECTORY]
+
+This changes the current working directory ("current
+filestore") to DIRECTORY. If DIRECTORY is omitted,
+the default directory (this is the one initially entered
+when logged in) is changed to.
+
+This command is likely to fail because many servers don't
+support the navigation facility.
+
+.TP
+.B pwd
+
+This prints the name of the server's current working directory
+("current filestore") to stdout.
+
+.TP
+.B slist
+
+This corresponds to the  300-383 S-LIST primitive.
+It prints a list of the subdirectories contained in the
+current working directory. The list items consist of
+a so called file store reference followed by the filestore
+(directory) name. (The eftp4linux server supports this, but
+the filestore references are currently not generated totally
+norm conforming.)
+
+
+.TP
+.B list
+
+This corresponds to the ETS 300-383 LIST primitive.
+It is similar to the slist command, but prints a list of all
+directories of the server. (Even the eftp4linux server does not
+support this).
+
+
+.PP
+.ul
+Misc Commands
+
+.TP
+.B msg MESSAGE
+
+The MESSAGE string is send literally to the remote server
+if the server supports it (most servers won't) by means of
+the ETS 300-075 T-TYPED_DATA primitive.
+
+If MESSAGE is ommitted, the client will prompt for the message
+string (can currently cause problems as protocol precessing is
+currently not performed whil waiting for the user input).
+
+.TP
+.B lcd DIR
+
+change local working directory to DIR
+
+.TP
+.B ! COMMAND-STRING
+
+execute COMMAND-STRING as a shell command.
+
+.TP
+.B quit
+
+This will quit the EUROFILE session, close the connection, and
+exit the eftp programme.
+
+.SH AUTHOR
+manpage written from usage text file by Paul Slootman <paul@debian.org>.
--- isdnutils-3.3.orig/eurofile/doc/eftd.8
+++ isdnutils-3.3/eurofile/doc/eftd.8
@@ -0,0 +1,337 @@
+.\" $Id: $
+.\"
+.\" CHECKIN $Date: $
+.\"
+.TH eftd 8
+.SH NAME
+eftd \- ISDN EUROFILE file transfer server
+.SH SYNOPSIS
+As this is alpha test software, options might change with each release!
+
+eftd [-a [ACCESS_FILE]] [-IlsV?] [-d LEVEL] [-D MASK] [-b LOGFILE] [-l LEVEL] [-L MASK] [-U FALLBACK_USER_ID] [-x ADDR]
+
+.SH DESCRIPTION
+.B eftd
+eftd allows clients to connect to your machine via the ISDN and to
+transfer files by means of the EUROFILE transfer protocol. That
+protocol is specified by ETSI norms ETS 300-075 and ETS 300-383.
+
+Unless the -s option is given, the server loops forever waiting for
+incoming connections and forks a child process for each connection
+received.
+
+.SH OPTIONS
+
+.TP
+.BI -a
+Expects a string argument interpreted as a file name.
+If eftd is compiled with the CONFIG_EFTD_WUAUTH
+option, eftd reads ACCESS_FILE and uses the contents
+for user authentication similarly to wu-ftpd's
+ftpaccess file. See eftaccess(5) for further details.
+
+.TP
+.BI -b
+Expects a string argument interpreted as a file	name.
+Communication events selected by the -l or -L option
+are logged (appended) to the file specified by the
+option's argument. (This is the 'LogBook' file in
+terms of ETS 300 383, thus the 'b'). If this option is
+omitted, a system dependent default (i.e.
+/var/log/eftd.log) is used. Opening of the LogBook
+file can be supressed simply by not suppling any -l or
+-L option.
+
+.TP
+.BI -d
+Expects an integer argument which is interpreted as a
+log level. Protocol or internal events up to the level
+are logged to stderr.
+
+For levels 0 - 3, see the -l option.
+
+Higher values include more events in the log,
+such as low level protocol and call traces and
+temporarily inserted debugging output statements.
+
+Use of -d as well as level > 3 is primarily intended
+for debugging purpose. This also implies that the
+output caused by log levels > 3 is not documented and
+likely to change between releases.
+
+.TP
+.BI -D
+The bitmask argument allows for low level grained
+control of stderr output. It overrides previous
+-I and augments -d options. For maximum amount of
+debugging output use "-D -1". As this is really
+intended to be used for low level debugging, examine
+the eftp4linux sources (start by reading the source
+file src/lib/tdu_user.h) if you really want to use
+this option on your own.
+
+.TP
+.BI -I
+Logs the contents of /dev/isdnctrl to stderr. For this
+to work, other processes reading /dev/isdnctrl (i.e.
+isdnlog) should be stopped before). This option is
+intended for debugging purpose only.
+
+.TP
+.BI -l
+The integer argument specifies the log level for
+selecting the events written to the LogBook file
+(as specified by the -b option). Levels are
+
+.LP
+.RS
+.B 0
+No events at all.
+
+.B 1
+Important events related to session start and end (login and logout)
+
+.B 2
+Important events during each session.
+Also adds some events related session
+start/stop of minor priority.
+
+.B 3
+Other minor priority events.
+
+.B >3
+Low level events. As these are primarily
+useful for debugging purpose, it's probably
+better (but not strictly necessary) to log
+them by means of the -d option. See the latter
+for more info.
+.RE
+
+.LP
+.RS
+.B CAUTION:
+.br
+this log feature is currently new, extremly
+unfinished, incomplete and subject to improvements
+(volunteers welcome) and not my highest priority item.
+Thus, don't expect the current format of the messages
+to be fixed forever.
+.RE
+
+.TP
+.BI -L
+Conceptually similar to -D (see the latter). Allows
+fine grained control for selecting the events logged
+to the LogBook (-b) file.
+
+.TP
+.BI -x
+The string type argument should consist of up to 15
+digits which specify the X.25 [X.121/X.301] address
+the servers listens on for incoming connections. As
+EUROFILE is usually used with ISO-8208 X.25 DTE-DTE
+mode, you should use the empty string as argument
+here, which is the default. Thus, it is extremely
+unlikely that you want to use this option at all.
+
+This option can be given two times, allowing the
+server to listen on two different x25 addresses
+simultaneously.
+
+.TP
+.BI -s
+Single process mode. If this option is given, the
+server just serves the first incoming connection and
+exits when the session is finished. It does not fork a
+child process for serving that connection.
+
+This is mainly useful for running eftd under the
+control of a debugger (such as gdb). If you want to
+debug eftd like this, also make sure that the '-m'
+option is not set. (As the -m option forks an additional
+supervisor process, -s alone will not result in a
+debuggable single process eftd). Further, as the
+single process will not run under root permissions any
+longer after an EUROFile connection has been accepted,
+eftd can not clear isdn connections on its own, you
+may need to do so yourself. 
+
+.TP
+.BI -m
+Multiple connection mode. If this option is given, the
+server immidiately continues to accept new connections
+without waiting for the just accepted session to finish.
+The number of simultaneous served connections is not
+internally limited by the server. However, upper
+limits might be imposed by the mumber of physically
+available isdn B-channels, the number of running
+incoming isdn network interfaces configured with
+"encap x25iface", or by the authentification procedure
+(i.e. group limits configured in /etc/isdn/eftaccess).
+
+When multi mode is activated, the server forks an
+extra privileged supervisor process for each accepted
+connections which takes care of clearing the isdn
+connection after the session is finished. Thus, if N
+EURFILE sessions are active, there will be 2N+1 eftd
+processes.
+
+.TP
+.BI -U USER
+When this option is specified, a login attempt
+with a user name not in the passwd database will
+be using USER as the login name (with empty password).
+
+You might use '-U ftp' if you have configured
+anonymous access and want that unknown user ids
+should be handled as an anonymous eft access.
+Unknown user ids frequently occur as many clients
+insert some dummy user name in the t_associate request
+if no user name was configured.
+
+.TP
+.BI -V
+Prints version.
+
+.TP
+.BI -?
+prints usage message.
+
+
+.SH FEATURES
+
+The server supports most of the EUROFILE primitives,
+including navigation and extended directory format.
+However, T-RENAME, T-DELETE, and LIST are not supported yet.
+
+If eftd is compiled with the CONFIG_EFTD_WUAUTH option, user access
+is granted using an authentication procedure derived from wu-ftpd,
+the Washington University ftp server. Refer to the eft_wuauth man
+page for further details.
+
+Transfers can be logged to /var/log/eft_xferlog. The format of this file
+is compatible with the wu-ftpd xferlog format. Refer to the
+eft_xferlog man page for details. Also see event logging below.
+
+
+eftd can also be invoked (and then stopped) by means of the
+/etc/init.d/isdneurofile
+shell script:
+
+	/etc/init.d/isdneurofile start|stop
+
+This script reads configuration parameters (usually from
+/etc/isdn/eft.conf). You might want to edit this file before
+starting it.
+
+Besides starting eftd, the script also takes care of setting up
+the necessary isdn network interfaces. The script can be used by
+sysvinit to automatically start eft service as part of the system boot
+precedure. (But make sure it is called after isdn and x25 modules are
+loaded).
+
+
+.SH TRANSFER NAMES
+
+The EUROFILE protocol identifies files to be transferred by means of a
+so called `transfer name'. According to ETS 300-383/ETS 300-075,
+a transfer name may constist up to 8 keywords separated by the '/'
+character. Each keyword may constist of up to 12 printable
+(between 0x21 and 0x7e) ascii characters except '(', ')', '*',
+'+', and '/'. The total length of the transfer name must not exceed 70
+bytes.
+
+The transfer names generated by eftd (and which will be displayed in
+response to a T-Directory request) will always conform to this.
+
+eftd will also accept transfer names within incoming request
+(T-Load and T-Save request) that do not conform to the standards.
+If a transfer name in an incoming request is valid, it is processed
+by a mapping procedure which resolves to a file name. Transfer names
+not conforming to the standard are not subject to mapping. They are
+treated literally as POSIX filenames.
+
+
+.SH TRANSFER NAME MAPPING
+
+eftd maps transfer names to file names by means of two different
+methods. If the current working directory is writable by the user,
+a database is used that maps between transfer names and file names.
+
+The database is currently implemented by means of symlinks which are
+created in the working directory. Symlinks matching .++eft_fn.TRANSFER_NAME
+contain the file name corresponding to TRANSFER_NAME. Symlinks
+matching .++eft_tn.FILE_NAME contain the transfer name name
+corresponding to FILE_NAME. You can clean tha database by just
+removing all those symlinks (rm .++eft_[ft]n.*).
+
+If the directory is not writable by the user, an algorithm based ob
+the file/transfer name and the file's inode number is used to map between
+transfer names and file names.
+
+
+.SH EVENT LOGGING
+
+eftd provides for two event logging channels. The first is always
+stderr, the other is the so called LogBook file (an ETS 300 383 term)
+(which might be altered by means of the -b option) 
+
+The amount of events logged can be controlled by a log level, which
+may be supplied by means of the -d (for stderr channel) or the -l (for
+LogBook file channel). An even finer grained (but even less portable)
+control is possible by means of bitmask arguments supplied with the
+-D or -L option. 
+
+For debugging purpose, it is somtimes helpful to write the standard
+error messages syncronized with the logged events into the same stream.
+Thus, for generating debugging logs, it is preferable to use the
+stderr channel. For debugging certain very low (i.e. Linux kernel)
+level protocol problems, it is even desirable to write the isdn
+events (as read from /dev/isdnctrl) to the same stream. eftd provides
+for a -I option to achieve this goal as close as possible (however,
+synchronity cannot be granted here).
+
+Wenn large log levels are used, huge amounts of stderr output will be
+generated. Thus you might consider to redirect stderr to a disk file
+in such a case.
+
+Writing to a log file might block the eftd process, which might
+result in timing problems if the process is blocked for a very long
+(several seconds) time. Thus, it is not advisable to log events to
+files (i.e. located on unreliable NFS servers) which are likly to
+cause such blocking.
+
+
+.SH INTERWORKING PROBLEMS
+
+The majority of DOS/Windows based clients implicitly assume that
+file transfer names fulfil DOS file name conventions and don't
+distinguish between upper and lower case names. This is in violation
+to the ETSI norms and might cause inter-working problems.
+The server provides for a compatibility mode to inter-operate
+with such clients. In order to activate that compatibility mode,
+prepend a '+' character to the login name when connecting to the
+server. See the doc/INTERWOKING file for details. 
+
+If you intend to offer files for public download via eft,
+it is recommended to use file names that match DOS conventions
+only.
+
+
+.SH RESTRICTIONS (also called BUGS :-)
+
+Renaming and deleting (T-RENAME, T-DELETE) of files is not supported yet.
+The S-LIST primitive (recursivly listing all directories) is not
+supported. 
+
+Compression is not supported. This is not a serious limitation
+nowadays because on-disk compression formats like [g]zip are widley
+available, compress better, and also save disk storage.
+When eftp has established the connection, it issues the "eftp>" prompt
+and waits for commands that will be read from standard input.
+Interactive input can be edited by
+means of the GNU readline library.
+
+
+.SH AUTHOR
+manpage written from usage text file by Paul Slootman <paul@debian.org>.
